name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2 

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with: 
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
            
      - name: Build Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: false
          tags: ghcr.io/${{ github.repository }}:latest
          cache-from: type=registry,ref=psevdo12/zad2:cache
          platforms: linux/amd64,linux/arm64
          file: Dockerfile

      - name: Install Docker Scout CLI
        run: |
          curl -sSL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh
          sudo mv ~/.docker/cli-plugins/docker-scout /usr/local/bin/scout

      - name: Analyze Docker image with Docker Scout
        id: analyze_scout
        run: |
          scout cves ${{ secrets.DOCKERHUB_USERNAME }}/zad2:latest --output scout-output.sarif

      - name: Debug full scout-output.sarif
        run: |
          echo "Full contents of scout-output.sarif:"
          cat scout-output.sarif

      - name: Docker Scout Analysis for High Vulnerabilities
        id: docker_scout_high
        run: |
          high_count=$(awk '/## Packages and Vulnerabilities/{flag=1; next} /##/{flag=0} flag' scout-output.sarif | awk '{for (i=1; i<=NF; i++) if ($i ~ /^[0-9]+H$/) sum += int(substr($i, 1, length($i)-1))} END {print sum}')
          if [ "$high_count" -gt 0 ]; then
            echo "High severity vulnerabilities found: HIGH=$high_count"
            exit 1
          else
            echo "No high vulnerabilities found."
          fi
  
      - name: Docker Scout Analysis for Critical Vulnerabilities
        id: docker_scout_critical
        run: |
          critical_count=$(awk '/## Packages and Vulnerabilities/{flag=1; next} /##/{flag=0} flag' scout-output.sarif | awk '{for (i=1; i<=NF; i++) if ($i ~ /^[0-9]+C$/) sum += int(substr($i, 1, length($i)-1))} END {print sum}')
          echo "CRITICAL_CVES=$critical_count" >> $GITHUB_ENV
          if [ "$critical_count" -gt 0 ]; then
            echo "Critical severity vulnerabilities found: CRITICAL=$critical_count"
            exit 1
          else
            echo "No critical vulnerabilities found."
          fi

      - name: Push Docker image to GitHub Container Registry
        if: ${{ steps.docker_scout_critical.outcome == 'success' }} && ${{ steps.docker_scout_high.outcome == 'success' }}
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}:latest
          cache-from: type=registry,ref=psevdo12/zad2:cache
          cache-to: type=registry,ref=psevdo12/zadanie2:cache,max_size=5GB
          platforms: linux/amd64,linux/arm64

      - name: Push Docker image to Docker Hub
        if: ${{ steps.docker_scout_critical.outcome == 'success' }} && ${{ steps.docker_scout_high.outcome == 'success' }}
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true 
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/zadanie2:latest
          cache-from: type=registry,ref=psevdo12/zad2:cache
          cache-to: type=registry,ref=psevdo12/zadanie2:cache,max_size=5GB
         
